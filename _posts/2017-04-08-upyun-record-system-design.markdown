---
layout: post
title:  "录制系统的设计与架构"
date:   2017-04-08 10:03:25 +0800
author: hdu.yang
---

### 录制系统的主要功能
* 录制系统需要支持将直播推流到 UPYUN 以及通过 UPYUN 反向代理的流按照一定的模式录制成特定的多媒体格式文件用于回放与点播。目前录制系统支持的模式包括触发式录制与定时录制两种。触发录制指的是录制的开始是流推上来的时间，录制的结束是流断开的时间；定时录制指的是录制在特定时间段内的流，不管这个时间段内这条流推断过几次。目前录制系统支持的多媒体格式包括 mp4、flv、ts 以及 m3u8 这四种。
* 由于触发式录制在流断开的时候就会生成一个文件，而客户希望针对闪断的流进行合并，所以目前录制系统还支持闪断合并的功能。只要流断开后在一定时间内再推上来，我们就不会为此单独生成一个文件。
* 定时任务在定时开始时间之前修改配置会生效；定时任务开始后修改配置则不再生效。

### 录制系统的总体架构
* 录制系统由一个 Master 和 多个 Worker 构成，Master 负责接收 OA 发送的流的上下线通知，并根据配置将此转换成录制的开始与结束请求发送给 Worker，由 Worker 进行真正的录制与结束。Worker 负责真正的流的录制和结束，并通过心跳汇报流的状态。每个 Worker 会包括多个录制任务，针对每个录制任务都会生成一个 dump 进程，并与 Worker 保持心跳。
![架构图](http://upyun-public.b0.upaiyun.com/record_struct.png)

### Master 的主要功能
* 接收来自 OA 的上下线通知并放入消息队列，并创建**消费协程**对消费队列进行消费。消费时需要过滤顺序不正确的上下线通知，将定时任务加入定时任务列表，针对触发任务及时发送开始和结束请求（对于 delay 为 0）给 Worker。

* 针对定时任务，创建**定时任务协程**进行定时器轮询，对于到达开始时间和结束时间的定时任务，向 Worker 发送开始和结束请求。

* 创建**延迟结束协程**，将满足延迟结束的任务发送结束请求给 Worker。

* 接收来自 Worker 的心跳汇报，更新流的状态以及时间戳。

* 创建**任务检查协程**，对于失联的 Worker 上的任务进行重新任务分配；对于重复的与 Master 上的状态不一致的任务，进行及时结束。对于 Worker 上报的已经结束的任务将结束查询出来后回调给 OA。

* 针对每次任务数据的增删改查都进行持久化操作。

* 提供针对所有在线流以及单独在线流的状态查询；提供针对所有 Worker 以及 Master 的状态查询。

### Worker 的主要功能
* 作为高可用组件的一部分，Worker 是无状态的服务，可以在需要的时候及时增减 Worker 的数量。

* 创建**消费协程**，接受来自 Master 的录制开始和结束请求，当录制开始的时候创建一个 dump 进程，当录制结束的时候结束对应的 dump 进程。

* 创建**心跳汇报协程**，每隔 2s 向 Master 汇报所有流的状态，包括所有正在录制的流以及已经结束的流，针对结束的流下次不再汇报

* 接收来自 dump 的心跳，为了防止 dump 假死而导致的实际没有录流的情况，每个创建的 dump 进程都需要每隔 2s 向 Worker 进行心跳汇报，如果 Worker 发现某个 dump 不再进行心跳汇报，会先停掉原来的僵死的 dump，重新创建新的 dump 进程。

* dump 在录制过程中会将录制的结果按照一定的格式分别写入支持时移的 mongo 数据库以及支持回调的 redis 数据库。

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
